#!/bin/sh
#|-*- mode:lisp -*-|#
#| Start a swank server
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ql:quickload '(:swank-ros) :silent t))

(defpackage #:ros.script.roswell/swank.ros
  (:use #:cl))
(in-package #:ros.script.roswell/swank.ros)

(defmacro parse-argv ((argv) &body options)
  (let ((i (gensym)))
    `(let ,(cons
            (list argv argv)
            (loop for x in options
               when (getf x :var)
               collect `(,(getf x :var) ,(getf x :default))))
       (loop while ,argv
             for ,i = (pop ,argv)
             unless (cond
                      ,@(loop for x in options
                              collect `((member ,i ',(getf x :option) :test 'equal)
                                        ,(if (getf x :var)
                                             `(setf ,(getf x :var) ,(getf x :convert))
                                             `(progn ,(getf x :side-effect)))
                                        t))
                      ((equal ,i "--help")
                       (format *error-output* "~&~A~%"
                               ,(format nil
                                        "usage: ~A ~{~A~^ ~}"
                                        (ignore-errors (file-namestring *load-pathname*))
                                        (mapcar (lambda(x)
                                                  (if (getf x :description)
                                                      (format nil "[~A <~A>]"
                                                              (first (getf x :option))
                                                              (getf x :description))
                                                      (format nil "[~A]"
                                                              (first (getf x :option)))))
                                                options)))
                       (uiop:quit 0)))
               do (format *error-output* "~&Invalid argument: ~S~%" ,i)
                  (uiop:quit 1))
       ,`(list
          ,@(loop for x in options
                  for name = (getf x :var)
                  when name collect (intern (string name) :keyword)
                  when name collect name)))))

(defun main (&rest argv)
  (let* (system
         (parsed (parse-argv (argv)
                   (:var nil
                    :option ("-s")
                    :side-effect (setf system (pop argv))
                    :description "system")
                   (:var port
                    :default 4005
                    :option ("-p" "--port")
                    :convert (parse-integer (pop argv) :junk-allowed t)
                    :description "port")
                   (:var interface
                    :default "127.0.0.1"
                    :option ("-i" "--interface")
                    :convert (pop argv)
                    :description "interface")
                   (:var style
                    :default nil
                    :option ("-St" "--style")
                    :convert (let ((s (pop argv)))
                               (cond
                                 ((equal s "spawn") :spawn)
                                 ((equal s "sigio") :sigio)
                                 ((equal s "fd-handler") :fd-handler)
                                 ((equal s "nil") nil)
                                 ((equal s "default") swank:*communication-style*)))
                    :description "style")
                   (:var dont-close
                    :default t
                    :option ("-c" "--close")
                    :convert nil))))
    (flet ((swank ()
             (in-package :cl-user)
             (apply 'swank:create-server parsed)
             (loop (sleep 10))))
      #-windows
      (format *error-output* "server pid ~A~%" (daemon::getpid))
      (loop
         (when system
           #-quicklisp (asdf:load-system system)
           #+quicklisp (ql:quickload system))
         #+windows (swank)
         #-windows
         (let ((pid (daemon::fork)))
           (cond
             ((= pid 0) ;; child
              (loop (swank)))
             ((plusp pid) ;; parent
              (format *error-output* "swank pid ~A~%" pid)
              (daemon::waitpid pid 0)
              (format *error-output* "swank pid ~A killed~%" pid))
             ((= pid -1)
              (error "fork failure"))))))))
;;; vim: set ft=lisp lisp:
